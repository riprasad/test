name: Workflow Dispatch Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Log Metadata
        run: |
          echo "Releasing Apicurio Data Models version ${{ github.event.inputs.release-version }} from branch ${{ github.event.inputs.branch }}"
          echo "Next Snapshot version will be ${{ github.event.inputs.snapshot-version }}"
          
      - name: Set up Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12          
      
      - name: Set up Gren
        run: npm install github-release-notes -g
        
      - name: Code Checkout
        run: |
          mkdir test
          cd test
          git init
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote add origin "https://$GITHUB_ACTOR:${{ secrets.ACCESS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
          git fetch
          git checkout ${{ github.event.inputs.branch}}
          git branch --set-upstream-to=origin/${{ github.event.inputs.branch}}
          git pull
          echo "#### Listing files after clone ####"
          find .

      - name: list Directory
        run: cd test && ls -lrt

      - name: Update Release Version ${{ github.event.inputs.release-version}}
        run: cd test && mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true


      #- name: Verify Build
      #  run: mvn clean install -Ptranspilation


      - name: Commit Release Version Change
        run: |
          cd test
          git add .
          git commit -m "Automated version update: ${{ github.event.inputs.release-version}}"
          git push
          
      - name: Fetch Latest Commit SHA
        run: |
          cd test
          echo "latest_commit_sha=$(git log -n 1 --pretty=format:"%H")" >> $GITHUB_ENV
      
      - name: Print environment variable
        run: |
          echo "${{ env.latest_commit_sha }}"
          echo "${latest_commit_sha}"


      #- name: Create Github release
      #  run: ./.github/scripts/create-github-release.sh ${{ github.event.inputs.release-version}} ${{ github.event.inputs.branch}} ${{github.repository}} ${{ secrets.GITHUB_TOKEN }}
      
      #- uses: ncipollo/release-action@v1
      #  with:
      #    tag: ${{ github.event.inputs.release-version}}
      #    name: ${{ github.event.inputs.release-version}}
      #    commit: ${{ env.latest_commit_sha }}
      #    token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.release-version}}       
          release_name: ${{ github.event.inputs.release-version}}
          commitish: ${{ env.latest_commit_sha }}


      - name: Generate Release Notes
        run: cd test && gren release --token=${{ secrets.GITHUB_TOKEN }} --override --prefix=v

      - name: Update Snapshot version ${{ github.event.inputs.snapshot-version}}
        run: cd test && mvn versions:set -DnewVersion=${{ github.event.inputs.snapshot-version}} -DgenerateBackupPoms=false -DprocessAllModules=true


      - name: Commit Snapshot Version Change
        run: |
          cd test
          git add .
          git commit -m"Automated version update: ${{ github.event.inputs.snapshot-version}}"
          git push             


    
